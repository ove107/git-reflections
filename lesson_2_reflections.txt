What happens when you initialize a repository? Why do you need to do it?
Ans: A git repository is initialised in the directory in which we are standing and a .git hidden file
is created. We need to do it as we need to initialise this file so as it can collect the metadat for the files that we are editing


How is the staging area different from the working directory and the repository? What value do you think it offers?
Ans: Staging area is an intermediary area between working directory and the git repository it offers a stage for us to review our changes before we make them a snap shot by commiting them to repositories.


How can you use the staging area to make sure you have one commit per logical change?
Ans: *I can now use >git diff< to check the differences between files that have been changed but not yet added.
	 *I can use <git diff --staged< to see the differences between staged files and un staged to confirm that these are
	 	infact the changes you want to commit.
	 *I can make use of >git reset --hard< to remove the changes that have been added to the staging area.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Ans: well branching come into effect when addding new features or experimenting at the code base to modify the exusting nature of your code basee.



How do the diagrams help you visualize the branch structure?
Ans: The diagrams here give a visual representation of git working under the hood for us.
What is the result of merging two branches together? Why do we represent it in the diagram What is the result of merging two branches together? Why do we represent it in the diagram the way we do?the way we do?


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Ans:well merging two branches together merges the codes the changes or the features that were in both of them
git make use of initial commits and the end commit to ensure what code lines must be added and what need to be
removed from them. The diagrams here help us understand how under the hood every thing works.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Ans: Where automatic merging assists you to ease the merging between two different branch heads by automatically figuring out what files are changed and what needs to be kept in the merged repo, by making it out via analysing the files initial commit and the changes made accross various commits in two branches.

Manual merge comes under the case when there is a merge conflict ie where two fies are modified at same lines so now git cant figure it out own its own AS TO WHICH CHANGES TO  be kept and which all need to be discarded.


